name: 'ONNX Runtime Coverage Steps'
description: 'Build ONNX Runtime, run tests, and generate coverage reports'
runs:
  using: 'composite'
  steps:
    # Install dependencies
    - name: Install dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          python3-dev \
          python3-pip \
          python3-setuptools \
          python3-wheel \
          python3-numpy \
          gcovr \
          lcov \
          libprotobuf-dev \
          protobuf-compiler \
          libonnx-dev
        python3 -m pip install --upgrade pip setuptools wheel
        python3 -m pip install pytest

    # Setup Python environment for ONNX Runtime
    - name: Setup Python for ONNX Runtime
      shell: bash
      run: |
        python3 -m pip install \
          numpy \
          protobuf \
          sympy \
          packaging \
          cerberus \
          flatbuffers \
          pytest

    # Update git submodules (required for ONNX Runtime build)
    - name: Update submodules
      shell: bash
      run: |
        git submodule sync --recursive
        git submodule update --init --recursive

    # Build ONNX Runtime with coverage enabled
    # This step configures the build with CMake using coverage flags
    - name: Configure build with coverage
      shell: bash
      run: |
        mkdir -p build/Linux
        cd build/Linux
        python3 ../../tools/ci_build/build.py \
          --build_dir . \
          --config Debug \
          --build_shared_lib \
          --parallel \
          --enable_pybind \
          --code_coverage \
          --skip_tests \
          --compile_no_warning_as_error \
          --allow_running_as_root \
          --update \
          --build

    # Run the test suite to collect coverage data
    # Tests are executed via CTest which runs all unit tests and integration tests
    - name: Run tests with coverage collection
      shell: bash
      run: |
        cd build/Linux/Debug
        # Set environment variables for gcov coverage collection
        export GCOV_PREFIX_STRIP=$(pwd | tr -cd '/' | wc -c)
        export GCOV_PREFIX=$(pwd)
        
        # Run the main test suite
        ctest --build-config Debug --verbose --timeout 3600 --output-on-failure || true
        
        # Run Python tests if available
        if [ -f "../../tools/ci_build/build.py" ]; then
          cd ../../..
          python3 -m pytest onnxruntime/test/python/ -v --tb=short || true
          cd build/Linux/Debug
        fi

    # Generate coverage reports using gcovr
    # This creates both text and HTML coverage reports
    - name: Generate coverage reports
      shell: bash
      run: |
        cd build/Linux/Debug
        
        # Generate text coverage report
        gcovr \
          --root ../../../onnxruntime \
          --filter ../../../onnxruntime/core/ \
          --filter ../../../onnxruntime/providers/ \
          --exclude '../../../onnxruntime/test/' \
          --exclude '../../../build/' \
          --exclude '../../../cmake/' \
          --txt \
          --output coverage_report.txt \
          . || echo "Text coverage report generation failed"
        
        # Generate HTML coverage report
        gcovr \
          --root ../../../onnxruntime \
          --filter ../../../onnxruntime/core/ \
          --filter ../../../onnxruntime/providers/ \
          --exclude '../../../onnxruntime/test/' \
          --exclude '../../../build/' \
          --exclude '../../../cmake/' \
          --html \
          --html-details \
          --output coverage_report.html \
          . || echo "HTML coverage report generation failed"
        
        # Generate XML coverage report for tools integration
        gcovr \
          --root ../../../onnxruntime \
          --filter ../../../onnxruntime/core/ \
          --filter ../../../onnxruntime/providers/ \
          --exclude '../../../onnxruntime/test/' \
          --exclude '../../../build/' \
          --exclude '../../../cmake/' \
          --xml \
          --output coverage_report.xml \
          . || echo "XML coverage report generation failed"
        
        # Display coverage summary
        echo "=== COVERAGE SUMMARY ==="
        if [ -f coverage_report.txt ]; then
          cat coverage_report.txt
        else
          echo "Coverage report not generated"
        fi

    # Upload coverage reports as artifacts
    # The coverage report will be available in the "coverage" artifact
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage
        path: |
          build/Linux/Debug/coverage_report.txt
          build/Linux/Debug/coverage_report.html
          build/Linux/Debug/coverage_report.xml
        retention-days: 30
      if: always()

    # Create a summary file with key metrics
    - name: Create coverage summary
      shell: bash
      run: |
        cd build/Linux/Debug
        echo "=== Coverage Summary ===" > coverage_summary.txt
        echo "Generated at: $(date)" >> coverage_summary.txt
        echo "" >> coverage_summary.txt
        
        if [ -f coverage_report.txt ]; then
          echo "Coverage details:" >> coverage_summary.txt
          grep -E "(lines|functions|branches)" coverage_report.txt | head -10 >> coverage_summary.txt || true
        else
          echo "Coverage report file not found" >> coverage_summary.txt
        fi
        
        echo "" >> coverage_summary.txt
        echo "Available reports:" >> coverage_summary.txt
        ls -la coverage_report.* >> coverage_summary.txt 2>/dev/null || echo "No coverage report files found" >> coverage_summary.txt
        
        cat coverage_summary.txt