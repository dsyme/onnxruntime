name: 'ONNX Runtime Coverage Generation'
description: 'Build the ONNX Runtime project and generate comprehensive test coverage reports'
runs:
  using: 'composite'
  steps:
    # Setup Python environment
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # Install system dependencies for coverage analysis
    - name: Install system dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          libprotobuf-dev \
          protobuf-compiler \
          python3-dev \
          python3-pip \
          lcov \
          gcovr \
          clang

    # Install Python dependencies
    - name: Install Python dependencies for testing
      shell: bash
      run: |
        pip install --upgrade pip
        pip install pytest pytest-cov coverage numpy onnx

    # Configure and build with coverage flags
    # This builds a minimal CPU-only version with coverage enabled for faster iteration
    - name: Build ONNX Runtime with coverage
      shell: bash
      run: |
        mkdir -p build/Linux
        cd build/Linux
        
        # Configure with coverage flags
        cmake ../.. \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_FLAGS="--coverage -fprofile-arcs -ftest-coverage" \
          -DCMAKE_C_FLAGS="--coverage -fprofile-arcs -ftest-coverage" \
          -DCMAKE_EXE_LINKER_FLAGS="--coverage" \
          -DCMAKE_SHARED_LINKER_FLAGS="--coverage" \
          -Donnxruntime_BUILD_UNIT_TESTS=ON \
          -Donnxruntime_BUILD_BENCHMARKS=OFF \
          -Donnxruntime_ENABLE_PYTHON=ON \
          -Donnxruntime_RUN_ONNX_TESTS=ON \
          -Donnxruntime_USE_CUDA=OFF \
          -Donnxruntime_USE_DNNL=OFF \
          -Donnxruntime_USE_TENSORRT=OFF \
          -G Ninja
        
        # Build the project
        ninja -j$(nproc)
        
    # Run C++ unit tests with coverage
    - name: Run C++ unit tests
      shell: bash
      run: |
        cd build/Linux
        # Run the main test executable
        if [ -f "./onnxruntime_test_all" ]; then
          ./onnxruntime_test_all --gtest_output=xml:cpp_test_results.xml || true
        fi
        
        # Run other test executables if they exist
        find . -name "*test*" -executable -type f | grep -E "(test|Test)" | while read test_exe; do
          echo "Running test: $test_exe"
          "$test_exe" || true
        done

    # Build Python bindings if possible
    - name: Build Python wheel
      shell: bash
      run: |
        # Build Python wheel with coverage
        python tools/ci_build/build.py \
          --build_dir build/Linux \
          --config Debug \
          --build_wheel \
          --enable_onnx_tests \
          --skip_submodule_sync \
          --parallel || true

    # Run Python tests if wheel was built successfully
    - name: Run Python tests with coverage
      shell: bash
      run: |
        if [ -f "build/Linux/Debug/dist/"*.whl ]; then
          pip install build/Linux/Debug/dist/*.whl
          
          # Run Python tests with coverage if available
          if [ -d "onnxruntime/python" ]; then
            cd onnxruntime/python
            python -m pytest -v --tb=short || true
          fi
          
          # Run any other Python test files found
          find . -name "*test*.py" -path "*/test/*" | head -20 | while read py_test; do
            echo "Running Python test: $py_test"
            python "$py_test" || true
          done
        fi

    # Generate C++ coverage reports using gcovr and lcov
    - name: Generate C++ coverage report
      shell: bash
      run: |
        cd build/Linux
        
        # Generate coverage report using gcovr (XML format for detailed analysis)
        gcovr \
          --root ../.. \
          --exclude '.*test.*' \
          --exclude '.*external.*' \
          --exclude '.*third_party.*' \
          --exclude '.*build.*' \
          --xml coverage_cpp.xml \
          --html-details coverage_cpp.html \
          --txt coverage_cpp.txt \
          . || true
        
        # Also generate lcov report
        lcov --capture --directory . --output-file coverage_cpp.lcov || true
        lcov --remove coverage_cpp.lcov \
          '*/test/*' '*/tests/*' '*/external/*' '*/third_party/*' \
          --output-file coverage_cpp_filtered.lcov || true
        
        # Generate HTML report from lcov
        genhtml coverage_cpp_filtered.lcov --output-directory coverage_cpp_html || true

    # Generate Python coverage if applicable
    - name: Generate Python coverage report
      shell: bash
      run: |
        # Create consolidated Python coverage if pytest-cov data exists
        if [ -f ".coverage" ]; then
          coverage xml -o coverage_python.xml || true
          coverage html -d coverage_python_html || true
          coverage report > coverage_python.txt || true
        fi

    # Combine and summarize coverage data
    - name: Create coverage summary
      shell: bash
      run: |
        echo "# ONNX Runtime Coverage Report Summary" > coverage_summary.md
        echo "" >> coverage_summary.md
        echo "Generated on: $(date)" >> coverage_summary.md
        echo "" >> coverage_summary.md
        
        # C++ Coverage Summary
        if [ -f "build/Linux/coverage_cpp.txt" ]; then
          echo "## C++ Coverage" >> coverage_summary.md
          echo '```' >> coverage_summary.md
          cat build/Linux/coverage_cpp.txt >> coverage_summary.md
          echo '```' >> coverage_summary.md
          echo "" >> coverage_summary.md
        fi
        
        # Python Coverage Summary  
        if [ -f "coverage_python.txt" ]; then
          echo "## Python Coverage" >> coverage_summary.md
          echo '```' >> coverage_summary.md
          cat coverage_python.txt >> coverage_summary.md
          echo '```' >> coverage_summary.md
          echo "" >> coverage_summary.md
        fi
        
        # List all generated coverage files
        echo "## Generated Coverage Files" >> coverage_summary.md
        echo '```' >> coverage_summary.md
        find build/Linux -name "*coverage*" -type f | sort >> coverage_summary.md 2>/dev/null
        find . -maxdepth 1 -name "*coverage*" -type f | sort >> coverage_summary.md 2>/dev/null
        echo '```' >> coverage_summary.md

    # Upload all coverage reports as artifacts
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage
        path: |
          build/Linux/coverage_cpp.xml
          build/Linux/coverage_cpp.txt  
          build/Linux/coverage_cpp.html
          build/Linux/coverage_cpp_html/
          build/Linux/coverage_cpp.lcov
          build/Linux/coverage_cpp_filtered.lcov
          coverage_python.xml
          coverage_python.txt
          coverage_python_html/
          coverage_summary.md
          build/Linux/cpp_test_results.xml
        if-no-files-found: ignore

    # Create a simple coverage summary file for easy consumption
    - name: Create simple coverage metrics file
      shell: bash
      run: |
        echo "# Coverage Metrics" > coverage_metrics.txt
        echo "Timestamp: $(date --iso-8601)" >> coverage_metrics.txt
        
        # Extract C++ coverage percentage if available
        if [ -f "build/Linux/coverage_cpp.txt" ]; then
          cpp_coverage=$(grep -E "TOTAL.*%" build/Linux/coverage_cpp.txt | tail -1 | awk '{print $4}' || echo "N/A")
          echo "C++ Line Coverage: $cpp_coverage" >> coverage_metrics.txt
          cpp_branch_coverage=$(grep -E "TOTAL.*%" build/Linux/coverage_cpp.txt | tail -1 | awk '{print $6}' || echo "N/A")  
          echo "C++ Branch Coverage: $cpp_branch_coverage" >> coverage_metrics.txt
        fi
        
        # Extract Python coverage percentage if available
        if [ -f "coverage_python.txt" ]; then
          python_coverage=$(grep -E "TOTAL.*%" coverage_python.txt | tail -1 | awk '{print $4}' || echo "N/A")
          echo "Python Coverage: $python_coverage" >> coverage_metrics.txt
        fi
        
        cat coverage_metrics.txt

    - name: Upload coverage metrics
      uses: actions/upload-artifact@v4
      with:
        name: coverage-metrics
        path: coverage_metrics.txt
        if-no-files-found: ignore